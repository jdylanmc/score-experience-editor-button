<?xml version="1.0"?>
<configuration>

    <!-- 
      ********************************************
      
      !!! IMPORTANT !!!
      
      This isn't a real Web.config. This Web.config won't be deployed into your local Sitecore by TDS.
      
      Our best practice is not to include Web.config into the solution and implement all configuration changes
      as patches in App_Config\Include. We are using the Environments project for all configuration patches and TDS file replacement
      facility to manage differences per target environment.
      
      Manipulating certain NuGet assemblies (e.g. Asp.Net Optimization aka WebGreese) might write into Web.config.
      If no Web.config is present in the solution a new one will be created. TDS will then copy it over to the target
      Sitecore instance or include into the .update package and it will break your Sitecore isntance if deployed. 
      An attempt to start the instance will produce a "Can't read sitecore configuration" exception. 
      
      We have added this empty Web.config to the Web project as <None> not as <Content>. 
      This way TDS won't see it as it only copies <Content> artifacts and it won't deploy and won't package it.
      The file, however, is there for NuGet to write to if any dependency requires it.
     
      If you decide to include Web.config into your solution you would need to make sure it's properly added as <Content>.
      The recommended way to do so would be to delete this Web.config and add a new one using Visual Studio "Add" dialog.
      
      ********************************************
    -->
  <system.web>
    <compilation debug="true" targetFramework="4.5.2" />
  </system.web>
</configuration>
